name: Code Quality
run-name: Code Quality Checks

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # Backend code quality
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-quality-${{ runner.os }}-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            uv-quality-${{ runner.os }}-
      
      - name: Install dependencies
        working-directory: backend
        run: |
          uv pip install -r requirements.txt -r requirements-test.txt
          uv pip install mypy bandit safety
      
      - name: Run Ruff Linting
        working-directory: backend
        run: uv run ruff check . --output-format=github
        continue-on-error: true
      
      - name: Run Ruff Formatting Check
        working-directory: backend
        run: uv run ruff format --check . --diff
        continue-on-error: true
      
      - name: Run Type Checking (mypy)
        working-directory: backend
        run: |
          uv run mypy . --install-types --non-interactive --ignore-missing-imports
        continue-on-error: true
      
      - name: Run Security Scanning (bandit)
        working-directory: backend
        run: |
          uv run bandit -r . -f json -o bandit-report.json || true
          uv run bandit -r . -f txt || true
        continue-on-error: true
      
      - name: Check Dependencies (safety)
        working-directory: backend
        run: |
          uv pip freeze | uv run safety check --stdin --json --output safety-report.json || true
          uv pip freeze | uv run safety check --stdin || true
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
          retention-days: 30

  # Frontend code quality
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "21"
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint -- --format=json --output-file=eslint-report.json || true
        continue-on-error: true
      
      - name: Run TypeScript Check
        working-directory: frontend
        run: npx tsc --noEmit
        continue-on-error: true
      
      - name: Check for unused dependencies
        working-directory: frontend
        run: |
          npx depcheck --json > depcheck-report.json || true
          npx depcheck || true
        continue-on-error: true
      
      - name: Upload frontend reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-reports
          path: |
            frontend/eslint-report.json
            frontend/depcheck-report.json
          retention-days: 30

  # Dependency analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
      
      - name: Check for known vulnerabilities
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_JAVASCRIPT_ES: false
          VALIDATE_TYPESCRIPT_ES: false
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_MARKDOWN: true

  # Summary of all quality checks
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-quality, frontend-quality, dependencies]
    
    steps:
      - name: Evaluate Results
        run: |
          BACKEND_STATUS="${{ needs.backend-quality.result }}"
          FRONTEND_STATUS="${{ needs.frontend-quality.result }}"
          DEPS_STATUS="${{ needs.dependencies.result }}"
          
          echo "Backend Quality: $BACKEND_STATUS"
          echo "Frontend Quality: $FRONTEND_STATUS" 
          echo "Dependencies: $DEPS_STATUS"
          
          if [[ "$BACKEND_STATUS" == "success" && "$FRONTEND_STATUS" == "success" && "$DEPS_STATUS" == "success" ]]; then
            echo "✅ All quality checks passed!"
            exit 0
          else
            echo "❌ Some quality checks failed - review the reports"
            exit 1
          fi